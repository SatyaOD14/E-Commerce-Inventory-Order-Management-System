# ecommerce_api.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import sqlite3

app = FastAPI(title="E-Commerce Inventory API")
DB = "ecommerce.db"

# -------------------------------
# Database Setup
# -------------------------------
def init_db():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            price REAL,
            stock INTEGER,
            restock_threshold INTEGER
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            quantity INTEGER
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# -------------------------------
# Pydantic Models
# -------------------------------
class Product(BaseModel):
    name: str
    price: float
    stock: int
    restock_threshold: int

class Order(BaseModel):
    product_id: int
    quantity: int

# -------------------------------
# Helper
# -------------------------------
def get_conn():
    conn = sqlite3.connect(DB)
    conn.row_factory = sqlite3.Row
    return conn

# -------------------------------
# Product CRUD
# -------------------------------
@app.post("/products/")
def add_product(prod: Product):
    conn = get_conn()
    conn.execute("INSERT INTO products (name, price, stock, restock_threshold) VALUES (?,?,?,?)",
                 (prod.name, prod.price, prod.stock, prod.restock_threshold))
    conn.commit()
    conn.close()
    return {"message": "Product added successfully"}

@app.get("/products/", response_model=List[Product])
def list_products():
    conn = get_conn()
    rows = conn.execute("SELECT * FROM products").fetchall()
    conn.close()
    return [dict(r) for r in rows]

@app.put("/products/{prod_id}")
def update_product(prod_id: int, prod: Product):
    conn = get_conn()
    conn.execute("UPDATE products SET name=?, price=?, stock=?, restock_threshold=? WHERE id=?",
                 (prod.name, prod.price, prod.stock, prod.restock_threshold, prod_id))
    conn.commit()
    conn.close()
    return {"message": "Product updated successfully"}

@app.delete("/products/{prod_id}")
def delete_product(prod_id: int):
    conn = get_conn()
    conn.execute("DELETE FROM products WHERE id=?", (prod_id,))
    conn.commit()
    conn.close()
    return {"message": "Product deleted successfully"}

# -------------------------------
# Orders
# -------------------------------
@app.post("/orders/")
def place_order(order: Order):
    conn = get_conn()
    product = conn.execute("SELECT * FROM products WHERE id=?", (order.product_id,)).fetchone()
    if not product:
        conn.close()
        raise HTTPException(status_code=404, detail="Product not found")
    if product['stock'] < order.quantity:
        conn.close()
        raise HTTPException(status_code=400, detail="Insufficient stock")
    
    conn.execute("INSERT INTO orders (product_id, quantity) VALUES (?,?)",
                 (order.product_id, order.quantity))
    conn.execute("UPDATE products SET stock = stock - ? WHERE id=?", (order.quantity, order.product_id))
    conn.commit()
    conn.close()
    return {"message": f"Order placed successfully for {order.quantity} units"}
